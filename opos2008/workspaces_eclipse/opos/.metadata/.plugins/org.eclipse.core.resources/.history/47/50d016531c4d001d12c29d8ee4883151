#include <stdlib.h>;

#define NO_CONNECTAT -1

//Estructures de dades
typedef struct distancia DISTANCIA;

struct distancia {
	int dist;
	int nodeAnterior;
};

void mostrarGraf(int pesos[],int nnodes);

int main(int argc, char **argv) {

	//Iniciar el graf
	//Paràmetres:
	//argv[1]= nº de nodes
	//Per cada node la seva llista d'adjacències (pesos als veins) parella: vei distancia
	//argv[2]=nº de node inicial
	//nnodes vegades:
	// argv[4] pes node vei 1
	// argv[5] pes node vei 2
	// argv[6] pes node vei 3
	// ...
	
	int nodeinicial,nnodes,i,j;
	ARESTA *veins;
	
	int *pesos;
	
	if (argc<6) {
		printf("El nombre de paràmetres mínim és 5(2 nodes). Utilitza: %d nnodes nodeinicial pes1 pes2 pes3 ",argv[0]);
	}
		
	
	nnodes=atoi(argv[1]);
	nodeinicial=atoi(argv[2]);
	
	pesos=(int*) malloc(sizeof(int)*nnodes*nnodes);
	
	//Els nodes que no estan connectats, es guarden amb un -1
	for (i = 0; i < nnodes; ++i) {
		for (j = 0; j < nnodes; ++j) {
			pesos[i*nnodes+j]=argv[3+nnodes*i+j];
	}
	
	//mostrarGrafInicial
	mostrarGraf(pesos,nnodes);
	
	free=(DISTANCIA*);
	
}
	
void dijkstra(int pesos[],int nnodes,int nodeinicial){
	int i,j;

	//Crear i Iniciar vector distàncies
	DISTANCIA *distancies; //On guardarem el resultat de l'agorismes de Dijkstra
	distancies=(DISTANCIA*) malloc(sizeof(DISTANCIA)*nnodes);

	for (i = 0; i < nnodes; ++i) {
		distancies[i].dist=pesos[nodeinicial*nnodes+i];
		if (pesos[nodeinicial*nnodes+i]!=NO_CONNECTAT)
			distancies[i].nodeAnterior=nodeinicial;
		else 
			distancies[i].nodeAnterior=-1;
	}

	
	for (i = 0; i < nnodes; ++i) {
		for (j = 0; j < nnodes; ++j) {
			if (pesos[*nnodes+j]!=NO_CONNECTAT) { //Només veins
				if (distancies[i].dist>(distancies[j]+pesos[])) {
					distancies[i].dist
				}
			}
			
		}
	}
	//Mostrar resultat
}

int min(int a,int b) {
	if (a<b)
}

void mostrarGraf(int pesos[],int nnodes) {
	int i,j;
	
	for (i = 0; i < nnodes; ++i) {
		for (j = 0; j < nnodes; ++j) {
			printf("%d ",pesos[*nnodes+j]);
		}
		printf("\n");
	}
	printf("\n");
	printf("\n");
}


