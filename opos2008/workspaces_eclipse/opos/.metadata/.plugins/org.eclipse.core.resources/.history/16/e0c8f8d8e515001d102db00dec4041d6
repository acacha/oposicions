import java.util.ArrayList;
import java.util.Iterator;
import java.util.PriorityQueue;
import java.util.Vector;

public class Node {

	private PriorityQueue<Integer> operands;

	private ArrayList<Node> fills;

	// Conté les operacions que s'han fet per arribar a aquest node des de el
	// node arrel
	private Vector<String> operacions;
	
	public PriorityQueue<Operands> getOperands() {
		return operands;
	}

	public void setOperands(PriorityQueue<Operands> operands) {
		this.operands = operands;
	}

	public Node() {
		// TODO Auto-generated constructor stub
		this.setOperands(new PriorityQueue<Integer>());
	}

	// El primer element sempre conté el resultat parcial del node
	public int obtenirResultatParcialNode() {
		return this.getOperands().peek().intValue();
	}

	public void mostrarResultat() {
		for (Iterator it = this.getOperands().iterator(); it.hasNext();) {
			System.out.println(((Operacio) it.next()).toString());
			// TODO
		}
	}

	private Node nouFill(Integer primerElement,
			PriorityQueue<Integer> restaElements, String operacio,
			Vector<String> operacionsPare) {
		Node fill = new Node();
		fill.getOperands().add(primerElement);
		fill.getOperands().addAll(restaElements);
		fill.getOperacions().addAll(operacionsPare);
		fill.getOperacions().add(operacio);
		return fill;
	}

	public void calcularFills() {
		int nOperands = this.getOperands().size();

		PriorityQueue<Integer> copia = new PriorityQueue<Integer>();

		// Obtenir una copia
		for (Iterator<Integer> it = this.getOperands().iterator(); it.hasNext();) {
			copia.add(it.next());
		}

		for (Iterator<Integer> it = this.getOperands().iterator(); it.hasNext();) {
			Integer operand = it.next();
			copia.poll();
			for (Iterator<Integer> it1 = copia.iterator(); it1.hasNext();) {
				Integer nextOperand = it1.next();
				// Suma
				int suma = nextOperand.intValue() + operand.intValue();
				this.getFills().add(
						this.nouFill(new Integer(suma), copia, "+", this
								.getOperacions()));

				// Resta
				int resta = nextOperand.intValue() - operand.intValue();
				this.getFills().add(
						this.nouFill(new Integer(resta), copia, "-", this
								.getOperacions()));

				// Multiplicacio
				int multiplicacio = nextOperand.intValue()
						* operand.intValue();
				this.getFills().add(
						this.nouFill(new Integer(multiplicacio), copia, "*",
								this.getOperacions()));

				// Divisio
				if ((nextOperand.intValue() % operand.intValue())==0)	{
					int divisio = nextOperand.intValue() / operand.intValue();
					this.getFills().add(
							this.nouFill(new Integer(divisio), copia, "/",
									this.getOperacions()));	
				}
			}
		}

	}

	public ArrayList<Node> getFills() {
		return fills;
	}

	public void setFills(ArrayList<Node> fills) {
		this.fills = fills;
	}

	public Vector<String> getOperacions() {
		return operacions;
	}

	public void setOperacions(Vector<String> operacions) {
		this.operacions = operacions;
	}

}
